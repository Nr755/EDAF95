**Prep:**

Task 1:
map2 :: (a -> c, b -> d) -> (a, b) -> (c, d)
map2 (f, g) (x, y) = (f x, g y)

map2 applies two different functions (f and g) to a pair (x, y).

Task 2:
mapIf :: (a -> a) -> (a -> Bool) -> [a] -> [a]
mapIf f p = map (\x -> if p x then f x else x)

mapIf applies a function f only to elements that satisfy predicate p.

Task 3:
maybeOr :: Maybe a -> Maybe a -> Maybe a
maybeOr (Just x) _ = Just x
maybeOr Nothing y  = y

maybeOr returns the first Just value if it exists, otherwise it returns the second argument.

Task 4:
firstJust :: [Maybe a] -> Maybe a
firstJust = foldr maybeOr Nothing

firstJust finds the first non-Nothing value in a list of Maybe values.

Task 5:
lookupList :: (Eq a) => a -> [(a, [b])] -> [b]
lookupList key xs = maybe [] id (lookup key xs)

lookup key xs returns a Maybe [b] (either Just [b] if found, or Nothing).
maybe [] id (lookup key xs):
If lookup key xs returns Nothing, it uses the default value [].
If it returns Just lst, it applies id (which just returns lst as-is).

**Part 1:**

Task 1:
maybeBind :: Maybe a -> (a -> Maybe b) -> Maybe b
maybeBind Nothing _ = Nothing
maybeBind (Just x) f = f x

If the first argument is Nothing, the function should return Nothing immediately (indicating failure).
Otherwise, if we have Just x, we extract the value x and apply function f to it.
Since f itself returns a Maybe b, we stay inside the Maybe context.

Task 2:
tryReplace :: Eq a => a -> a -> [a] -> Maybe [a]
tryReplace _ _ [] = Nothing
tryReplace y y’ (x:xs)
  | x == y = Just (y’:xs)
  | otherwise = fmap (x:) $ tryReplace y y’ xs

It that attempts to replace the first occurrence of an element in a list with a new element. 
If the element is found, it returns Just the modified list. If the element is not found, it returns Nothing.

Task 3:
-- maybeBind: If the Maybe value is Just, apply the function; otherwise, return Nothing
maybeBind :: Maybe a -> (a -> Maybe b) -> Maybe b
maybeBind Nothing _ = Nothing
maybeBind (Just x) f = f x

-- Try replacing elements from ys with corresponding zs in xs
recursiveReplacement :: Eq a => [a] -> [a] -> [a] -> Maybe [a]
recursiveReplacement xs [] [] = Just xs  -- Base case: No more replacements
recursiveReplacement xs (y:ys) (z:zs) =
  tryReplace y z xs `maybeBind` (\newXs -> recursiveReplacement newXs ys zs)
recursiveReplacement _ _ _ = Nothing  -- If the lists are of different lengths, return Nothing

maybeBind:
If given Nothing, return Nothing immediately.
If given Just x, apply the function to x.

recursiveReplacement:
Base case: If no replacements are left (ys and zs are empty), return Just xs (the modified list).
Recursive case:
Apply tryReplace on the first pair (y, z).
If successful (Just newXs), recurse with newXs and the remaining replacements.
If tryReplace fails, return Nothing.

**Part 2:**

Task 1:
type Board = [(String, [Int])] -- Each square has a name (e.g., "A1") and a list of possible values.

setValue :: Int -> String -> Board -> Board
setValue value square =
  mapIf (map2 (id, const [value])) (\(s, _) -> s == square)

Assign only the given value to the square, overriding any existing possibilities.

eliminateValue :: Int -> String -> Board -> Board
eliminateValue value square =
  mapIf (map2 (id, filter (/= value))) (\(s, vs) -> s == square && value `elem` vs)

Remove value from the list of possibilities if it exists.

Task 2:
Implemented `eliminate`, which attempts to remove a value from a square’s list of possible values.

eliminate :: Int -> String -> Board -> Maybe Board
eliminate value square board
  | square `notElem` map fst board = Just board
  | value `notElem` lookupList square board = Just board
  | null newValues = Nothing
  | length newValues == 1 = Just (setValue (head newValues) square board)
  | otherwise = Just newBoard
  where
    newBoard = eliminateValue value square board
    newValues = lookupList square newBoard

It covers three important cases:
  (1) If the value is already eliminated → do nothing, return the board.
  (2) If removing the value leaves no possible options → return `Nothing` (unsolvable).
  (3) If exactly one value remains after elimination → set that value using `setValue`.
Used guards and `where` to clearly handle these cases.

Task 3:
Implemented `assign`, which sets a value in a square and then propagates the elimination

assign :: Int -> String -> Board -> Maybe Board
assign value square board =
  Just (setValue value square board)
    `maybeBind` assign' value (getPeers square)

assign' :: Int -> [String] -> Board -> Maybe Board
assign' _ [] board = Just board
assign' value (p : ps) board =
  eliminate value p board `maybeBind` assign' value ps

Step 1: Use setValue to fix value at square.
Step 2: Recursively eliminate value from all peers of square using assign'.
2. assign' (Recursive Helper)

Base Case: If no more peers left, return Just board.
Recursive Case: Use eliminate value p board to remove value from p, then recursively apply assign' to remaining peers.
3. maybeBind

If any elimination fails (returns Nothing), the whole function fails.
If elimination succeeds, continue processing peers.

Task 4:
Implemented `parseBoard`, which converts a string-based Sudoku puzzle
into an internal `Board` representation, handling fixed values and blanks.

parseBoard :: String -> Maybe Board
parseBoard = foldr ((=<<) . parseSquare) (Just emptyBoard) . zip squares

Each character is matched with its corresponding square using `zip`.
The `assign` function is used for fixed digits to immediately apply constraint propagation.
This ensures the parsed board is already partially solved (if possible) and valid.

parseSquare :: (String, Char) -> Board -> Maybe Board
Tries to apply a digit to a square via assign.
(=<<) . parseSquare
This turns parseSquare into a function that:
Accepts a pair (square, char)
And applies it to a Maybe Board in the fold chain.
So it behaves like:

\(squareChar) mb -> mb >>= parseSquare squareChar
foldr threads the board through each parsed character:
If any assignment fails, it returns Nothing.
If all succeed, it returns Just Board.